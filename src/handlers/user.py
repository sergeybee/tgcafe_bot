import datetime

from aiogram import types, Dispatcher

from src.keyboards.reply.menu_user import user_menu

from datetime import datetime
from src.utils.db.dbase import DataBase
from src.config import load_config

config = load_config(".env")
db = DataBase(config.db.database, config.db.user, config.db.password, config.db.host)


async def message_handler_user_start(message: types.Message):
    #     """welcome message."""
    #     if await db.verification(message.from_user.id):
    #         await bot.send_message(message.chat.id, "üëã Hello, I remember you.")
    #     else:
    #         if message.from_user.first_name != "None":
    #             name = message.from_user.first_name
    #         elif message.from_user.username != "None":
    #             name = message.from_user.username
    #         elif message.from_user.last_name != "None":
    #             name = message.from_user.last_name
    #         else:
    #             name = ""
    #         await db.add_user(message.from_user.id, name, message.from_user.locale.language_name)
    #         await bot.send_message(message.chat.id, "‚ÑπÔ∏è <b>[About]\n</b> Bot is a template for future projects.")

    if not db.verification_user(message.from_user.id):
        await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –≤—ã —É –Ω–∞—Å –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑", reply_markup=user_menu())
        db.add_new_user(message.from_user.id, message.from_user.first_name, message.from_user.username,
                        datetime.now())
    else:
        await message.answer("–†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞!!!", reply_markup=user_menu())
    await message.delete()


async def message_handler_show_help(message: types.Message):
    """ –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ """

    text = [
        "–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞ –º–æ–∂–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –ø–æ —Ç–µ–ª. +7(111)111-11-11. "
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º, –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è @adress_tp."
    ]
    await message.answer('\n'.join(text))
    await message.delete()


async def message_handler_my_cart(message: types.Message):
    """ –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã """

    id_user = db.verification_user(message.from_user.id)
    # res = db.get_my_cart(id_user[0])
    # print(res)
    #
    if not db.get_my_cart(id_user[0]):
        await message.answer("–í –∫–æ—Ä–∑–∏–Ω–µ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤:")
    else:
        await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞: –¢—É—Ç –≤–∞—à–∏ —Ç–æ–≤–∞—Ä—ã. –ù—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å :)")
    await message.delete()


async def message_handler_my_order(message: types.Message):
    """ –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–¥–µ–ª–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ """

    if not db.verification_user(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤")
    else:
        await message.answer("–í–∞—à–∏ –∑–∞–∫–∞–∑—ã, –∑–¥–µ—Å—å –±—É–¥—É—Ç –≤—ã–≤–æ–¥–∏—Ç—å—Å—è –∑–∞–∫–∞–∑—ã. –ù—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –ë–î :)")
    await message.delete()


def register_user(dp: Dispatcher):
    dp.register_message_handler(message_handler_user_start, commands=["start"], state="*", is_user=True)
    dp.register_message_handler(message_handler_show_help, text="–ü–æ–º–æ—â—å")
    dp.register_message_handler(message_handler_my_cart, text="–ö–æ—Ä–∑–∏–Ω–∞")
    dp.register_message_handler(message_handler_my_order, text="–ú–æ–∏ –∑–∞–∫–∞–∑—ã")
